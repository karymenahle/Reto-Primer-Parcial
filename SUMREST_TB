--  A testbench has no ports.
entity sumrest_tb is
end sumrest_tb;

architecture behav of sumrest_tb is
  --  Declaration of the component that will be instantiated.
  component addsub
    PORT (
      A : IN BIT_VECTOR(7 DOWNTO 0);
      B : IN BIT_VECTOR(7 DOWNTO 0); 
      T : IN BIT;
      C_FLAG : OUT BIT;
      OV_FLAG : OUT BIT;
      R : OUT BIT_VECTOR(7 DOWNTO 0)
   );
  end component;

  --  Specifies which entity is bound with the component.
  for addsub_0: addsub use entity work.adder;
  signal A, B, R : BIT_VECTOR(7 DOWNTO 0);
  T, C_FLAG, OV_FLAG : bit;
begin
  --  Component instantiation.
  addsub_0: addsub port map (A => A, B => B, T => T, C_FLAG => C_FLAG, OV_FLAG => OV_FLAG, R=>R);

  --  This process does the real job.
  process
    type pattern_type is record
      --  The inputs of the adder.
      A, B, T : bit;
      --  The expected outputs of the adder.
      C_FLAG, OV_FLAG, R : bit;
    end record;
    --  The patterns to apply.
    type pattern_array is array (natural range <>) of pattern_type;
    constant patterns : pattern_array :=
      (("00000000", "00000000", '0', '0', '0', "00000000"),
       ("00000001", "00000000", '0', '0', '0', "00000001"));
     
  begin
    --  Check each pattern.
    for i in patterns'range loop
      --  Set the inputs.
      A <= patterns(i).A;
      B <= patterns(i).B;
      T <= patterns(i).T;
      --  Wait for the results.
      wait for 1 ns;
      --  Check the outputs.
      assert R = patterns(i).R
        report "bad sum value" severity error;
      assert C_FLAG = patterns(i).C_FLAG
        report "bad carry out value" severity error;
       assert OV_FLAG = patterns(i).OV_FLAG
        report "bad Over flow value" severity error;
    end loop;
    assert false report "end of test" severity note;
    --  Wait forever; this will finish the simulation.
    wait;
  end process;

end behav;
